import io.getmedusa.medusa.core.annotation.UIEventPage;
import io.getmedusa.medusa.core.attributes.Attribute;
import io.getmedusa.medusa.core.bidirectional.ServerToClient;
import io.getmedusa.medusa.core.session.Session;
import io.getmedusa.medusa.core.session.StandardSessionTagKeys;
import org.springframework.scheduling.annotation.Scheduled;
import sample.getmedusa.showcase.samples.AbstractSampleController;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;

@UIEventPage(path = "/detail/sample/live-statistic", file = "/pages/sample/live-statistic.html")
public class LiveStatisticController extends AbstractSampleController {

    private final ServerToClient serverToClient;

    private final List<String> uniqueSessionsSubscribedForARandom = new ArrayList<>();

    public LiveStatisticController(ServerToClient serverToClient) {
        this.serverToClient = serverToClient;
    }

    public List<Attribute> setupAttributes(Session session) {
        subscribe(session);

        return List.of(
                new Attribute("randomNumberUniquePerSession", 0)
            );

    }

    public void subscribe(Session session) {
        session.putTag("uniqueTag", UUID.randomUUID().toString());
        uniqueSessionsSubscribedForARandom.add(session.getTag("uniqueTag"));
    }

    //this process does not have to be a timer, but because timers run on a separate thread outside of context like, this perfect to kick off the serverside call
    @Scheduled(fixedDelay = 2000)
    public void aServerProcess() {
        for(String subscriberTagValue : uniqueSessionsSubscribedForARandom) {
            serverToClient.sendAttributesToSessionTag(
                    List.of(new Attribute("randomNumberUniquePerSession", new Random().nextInt(99999))),
                    "uniqueTag",
                    subscriberTagValue);
        }
        uniqueSessionsSubscribedForARandom.clear();
    }
}
