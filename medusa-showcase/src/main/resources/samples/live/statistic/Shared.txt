import io.getmedusa.medusa.core.annotation.UIEventPage;
import io.getmedusa.medusa.core.attributes.Attribute;
import io.getmedusa.medusa.core.bidirectional.ServerToClient;
import io.getmedusa.medusa.core.session.StandardSessionTagKeys;
import org.springframework.scheduling.annotation.Scheduled;
import sample.getmedusa.showcase.samples.AbstractSampleController;

import java.security.SecureRandom;
import java.util.List;

@UIEventPage(path = "/detail/sample/live-statistic", file = "/pages/sample/live-statistic.html")
public class LiveStatisticController extends AbstractSampleController {

    private final ServerToClient serverToClient;

    public LiveStatisticController(ServerToClient serverToClient) {
        this.serverToClient = serverToClient;
    }

    public List<Attribute> setupAttributes() {
        return List.of(
                new Attribute("randomNumberShared", 0)
            );
    }

    //this process does not have to be a timer, but because timers run on a separate thread outside of context like, this perfect to kick off the serverside call
    @Scheduled(fixedDelay = 2000)
    public void aRandomServerProcess() {
        serverToClient.sendAttributesToSessionTag(
            List.of(new Attribute("randomNumberShared", new Random().nextInt(9999))),
            StandardSessionTagKeys.ROUTE,
            "/detail/sample/live-statistic"
        );
    }

}
